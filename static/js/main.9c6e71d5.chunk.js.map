{"version":3,"sources":["../../dist/index.js","ChangingProgressbar.tsx","Demo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["__extends","this","_extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__importDefault","mod","__esModule","default","defineProperty","exports","value","react_1","__webpack_require__","CircularProgressbar","_super","props","_this","call","initialTimeout","undefined","requestAnimationFrame","state","percentage","initialAnimation","componentDidMount","window","setTimeout","setState","componentWillReceiveProps","nextProps","componentWillUnmount","clearTimeout","cancelAnimationFrame","getBackgroundPadding","background","backgroundPadding","strokeWidth","getPathDescription","radius","getPathRadius","rotation","counterClockwise","getPathStyles","diameter","Math","PI","dashoffset","min","max","strokeDasharray","strokeDashoffset","render","_a","className","classes","styles","text","pathDescription","createElement","root","style","viewBox","cx","cy","r","trail","fillOpacity","path","assign","x","y","defaultProps","Component","ChangingProgressbar","currentPercentageIndex","_this2","setInterval","percentages","length","interval","classForPercentage","getCurrentPercentage","stylesForPercentage","textForPercentage","react_default","a","dist_default","getClassName","getText","getStyles","React","concat","githubURL","Example","_ref","description","children","Demo","src_ChangingProgressbar","stroke","Demo_Example","fill","position","width","height","padding","src","alt","href","App","src_Demo","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c6e71d5.chunk.js","sourcesContent":["\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar MIN_PERCENTAGE = 0;\nvar MAX_PERCENTAGE = 100;\nvar MAX_X = 100;\nvar MAX_Y = 100;\nvar FULL_RADIUS = 50;\nvar CENTER_X = 50;\nvar CENTER_Y = 50;\n\nvar CircularProgressbar = function (_super) {\n  __extends(CircularProgressbar, _super);\n\n  function CircularProgressbar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.initialTimeout = undefined;\n    _this.requestAnimationFrame = undefined;\n    _this.state = {\n      percentage: props.initialAnimation ? 0 : props.percentage\n    };\n    return _this;\n  }\n\n  CircularProgressbar.prototype.componentDidMount = function () {\n    var _this = this;\n\n    if (this.props.initialAnimation) {\n      this.initialTimeout = window.setTimeout(function () {\n        _this.requestAnimationFrame = window.requestAnimationFrame(function () {\n          _this.setState({\n            percentage: _this.props.percentage\n          });\n        });\n      }, 0);\n    }\n  };\n\n  CircularProgressbar.prototype.componentWillReceiveProps = function (nextProps) {\n    this.setState({\n      percentage: nextProps.percentage\n    });\n  };\n\n  CircularProgressbar.prototype.componentWillUnmount = function () {\n    clearTimeout(this.initialTimeout);\n\n    if (this.requestAnimationFrame) {\n      window.cancelAnimationFrame(this.requestAnimationFrame);\n    }\n  };\n\n  CircularProgressbar.prototype.getBackgroundPadding = function () {\n    if (this.props.background) {\n      if (this.props.backgroundPadding == null) {\n        return this.props.strokeWidth;\n      }\n\n      return this.props.backgroundPadding;\n    }\n\n    return 0;\n  };\n\n  CircularProgressbar.prototype.getPathDescription = function () {\n    var radius = this.getPathRadius();\n    var rotation = this.props.counterClockwise ? 1 : 0;\n    return \"\\n      M \" + CENTER_X + \",\" + CENTER_Y + \"\\n      m 0,-\" + radius + \"\\n      a \" + radius + \",\" + radius + \" \" + rotation + \" 1 1 0,\" + 2 * radius + \"\\n      a \" + radius + \",\" + radius + \" \" + rotation + \" 1 1 0,-\" + 2 * radius + \"\\n    \";\n  };\n\n  CircularProgressbar.prototype.getPathStyles = function () {\n    var diameter = Math.PI * 2 * this.getPathRadius();\n    var truncatedPercentage = Math.min(Math.max(this.state.percentage, MIN_PERCENTAGE), MAX_PERCENTAGE);\n    var dashoffset = (100 - truncatedPercentage) / 100 * diameter;\n    return {\n      strokeDasharray: diameter + \"px \" + diameter + \"px\",\n      strokeDashoffset: (this.props.counterClockwise ? -dashoffset : dashoffset) + \"px\"\n    };\n  };\n\n  CircularProgressbar.prototype.getPathRadius = function () {\n    return FULL_RADIUS - this.props.strokeWidth / 2 - this.getBackgroundPadding();\n  };\n\n  CircularProgressbar.prototype.render = function () {\n    var _a = this.props,\n        percentage = _a.percentage,\n        className = _a.className,\n        classes = _a.classes,\n        styles = _a.styles,\n        strokeWidth = _a.strokeWidth,\n        text = _a.text;\n    var pathDescription = this.getPathDescription();\n    return react_1.default.createElement(\"svg\", {\n      className: classes.root + \" \" + className,\n      style: styles.root,\n      viewBox: \"0 0 \" + MAX_X + \" \" + MAX_Y\n    }, this.props.background ? react_1.default.createElement(\"circle\", {\n      className: classes.background,\n      style: styles.background,\n      cx: CENTER_X,\n      cy: CENTER_Y,\n      r: FULL_RADIUS\n    }) : null, react_1.default.createElement(\"path\", {\n      className: classes.trail,\n      style: styles.trail,\n      d: pathDescription,\n      strokeWidth: strokeWidth,\n      fillOpacity: 0\n    }), react_1.default.createElement(\"path\", {\n      className: classes.path,\n      d: pathDescription,\n      strokeWidth: strokeWidth,\n      fillOpacity: 0,\n      style: Object.assign({}, styles.path, this.getPathStyles())\n    }), text ? react_1.default.createElement(\"text\", {\n      className: classes.text,\n      style: styles.text,\n      x: CENTER_X,\n      y: CENTER_Y\n    }, text) : null);\n  };\n\n  CircularProgressbar.defaultProps = {\n    strokeWidth: 8,\n    className: '',\n    text: '',\n    background: false,\n    backgroundPadding: 0,\n    initialAnimation: false,\n    counterClockwise: false,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background'\n    },\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {}\n    }\n  };\n  return CircularProgressbar;\n}(react_1.default.Component);\n\nexports.default = CircularProgressbar;","import React from 'react';\nimport CircularProgressbar from 'react-circular-progressbar';\n\ntype CircularProgressbarProps = {\n  counterClockwise?: boolean;\n  strokeWidth?: number;\n};\n\ntype Props = CircularProgressbarProps &\n  typeof ChangingProgressbar.defaultProps & {\n    percentages: number[];\n    classForPercentage?: (percentage: number) => string;\n    stylesForPercentage?: (percentage: number) => {};\n    textForPercentage?: (percentage: number) => string;\n  };\n\ntype State = {\n  currentPercentageIndex: number;\n};\n\nclass ChangingProgressbar extends React.Component<Props, State> {\n  static defaultProps = {\n    interval: 1000,\n    classForPercentage: (percentage: number) => '',\n    stylesForPercentage: (percentage: number) => ({}),\n    textForPercentage: (percentage: number) => `${percentage}%`,\n  };\n\n  state = {\n    currentPercentageIndex: 0,\n  };\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        currentPercentageIndex:\n          (this.state.currentPercentageIndex + 1) % this.props.percentages.length,\n      });\n    }, this.props.interval);\n  }\n\n  getCurrentPercentage() {\n    return this.props.percentages[this.state.currentPercentageIndex];\n  }\n\n  getClassName() {\n    return this.props.classForPercentage(this.getCurrentPercentage());\n  }\n\n  getStyles() {\n    return this.props.stylesForPercentage(this.getCurrentPercentage());\n  }\n\n  getText() {\n    return this.props.textForPercentage(this.getCurrentPercentage());\n  }\n\n  render() {\n    return (\n      <CircularProgressbar\n        {...this.props}\n        className={this.getClassName()}\n        percentage={this.getCurrentPercentage()}\n        text={this.getText()}\n        styles={this.getStyles()}\n      />\n    );\n  }\n}\n\nexport default ChangingProgressbar;\n","import React from 'react';\nimport CircularProgressbar from 'react-circular-progressbar';\nimport ChangingProgressbar from './ChangingProgressbar';\n\nconst githubURL = 'https://github.com/kevinsqi/react-circular-progressbar';\n\nconst Example: React.FunctionComponent<{ description: string }> = ({ description, children }) => (\n  <div className=\"col-12 col-sm-6 col-md-3\">\n    <div className=\"row mb-1\">\n      <div className=\"col-6 offset-3\">{children}</div>\n    </div>\n    <p className=\"text-center\">{description}</p>\n  </div>\n);\n\nfunction Demo() {\n  return (\n    <div className=\"container\">\n      <div className=\"row mt-5\">\n        <div className=\"col-12\">\n          <div className=\"text-center\">\n            <h1 className=\"mb-3\">react-circular-progressbar</h1>\n            <p>A circular progress indicator component</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row mt-5 mb-5\">\n        <div className=\"col-6 offset-3 col-md-2 offset-md-5\">\n          <ChangingProgressbar\n            percentages={[0, 20, 40, 60, 80, 100]}\n            stylesForPercentage={(percentage: number) => {\n              const alpha = (100 + percentage) / 200;\n              return {\n                path: {\n                  stroke: `rgba(62, 152, 199, ${alpha})`,\n                },\n              };\n            }}\n          />\n        </div>\n      </div>\n\n      <hr />\n      <div className=\"row mt-5\">\n        <div className=\"col-12  mb-5\">\n          <h2 className=\"text-center\">Built with SVG and styled with plain CSS.</h2>\n        </div>\n\n        <Example description=\"Customize text and styling dynamically based on percentage.\">\n          <ChangingProgressbar\n            percentages={[75, 100]}\n            classForPercentage={(percentage: number) => {\n              return percentage === 100 ? 'complete' : 'incomplete';\n            }}\n            textForPercentage={(percentage: number) => {\n              return percentage === 100 ? `${percentage}!!` : `${percentage}`;\n            }}\n          />\n        </Example>\n\n        <Example description=\"Customize stroke width and make it go counterclockwise.\">\n          <ChangingProgressbar percentages={[0, 20, 80]} strokeWidth={5} counterClockwise />\n        </Example>\n\n        <Example description=\"Add a background color for that inverted look.\">\n          <CircularProgressbar\n            className=\"CircularProgressbar-inverted\"\n            background\n            backgroundPadding={5}\n            strokeWidth={6}\n            percentage={66}\n            text={`${66}%`}\n            classes={{\n              root: 'CircularProgressbar',\n              trail: 'CircularProgressbar-trail',\n              path: 'CircularProgressbar-path',\n              text: 'CircularProgressbar-text some-additional-test-class',\n              background: 'CircularProgressbar-background',\n            }}\n            styles={{\n              background: {\n                fill: '#3e98c7',\n              },\n            }}\n          />\n        </Example>\n\n        <Example description=\"With SVG and CSS you can do whatever you want.\">\n          <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n            <div style={{ position: 'absolute', width: '100%' }}>\n              <CircularProgressbar percentage={50} />\n            </div>\n            <div style={{ width: '100%', padding: '10%' }}>\n              <img style={{ width: '100%' }} src=\"https://i.imgur.com/b9NyUGm.png\" alt=\"doge\" />\n            </div>\n          </div>\n        </Example>\n      </div>\n\n      <hr />\n      <div className=\"mt-5 mb-5\">\n        <h2 className=\"text-center\">Installation</h2>\n        <div className=\"text-center mt-5\">\n          <p>Install with yarn or npm:</p>\n          <p className=\"mb-5\">\n            <code className=\"p-2 text-dark bg-yellow\">yarn add react-circular-progressbar</code>\n          </p>\n          <a className=\"btn btn-info btn-lg\" href={githubURL}>\n            View docs on Github\n          </a>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"mt-5\">\n            Built by <a href=\"https://www.kevinqi.com/\">@kevinsqi</a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Demo;\n","import React, { Component } from 'react';\nimport CircularProgressbar from 'react-circular-progressbar';\nimport Demo from './Demo';\n\n// Stylesheets\nimport 'react-circular-progressbar/dist/styles.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Demo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}